#!/usr/bin/env ruby
require 'cri'
require 'readline'
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
require 'openflow-controller'

PROMPT = '> '
BYE_MSG = 'Bye!'

command = Cri::Command.define do
  name        'ofctl'
  usage       'ofctl [options] [args]'
  summary     'OpenFlow Controller command-line tool'
  description 'OpenFlow Controller command-line tool'

  flag :h, :help, 'show help for this command' do |value, cmd|
    puts cmd.help
    exit 0
  end
  flag :d, :debug, 'run controller in debug mode'

  option :i, :ip,         'IP address of the controller',  argument: :optional
  option :p, :port,       'port number of the controller', argument: :optional
  option :c, :controller, 'custom controller file',        argument: :optional

  run do |opts, args, _cmd|
    load opts[:controller] unless opts[:controller].nil?

    debug = opts[:debug] || false

    ctl = OpenFlow::Controller::Controller.create(debug)

    init_form = ctl.logger.formatter
    ctl.logger.formatter = proc do |severity, datetime, progname, msg|
      buf = PROMPT + Readline::line_buffer
      "\r" + ' ' * buf.length + "\r" +
      init_form.call(severity, datetime, progname, msg).blue +
      buf
    end

    ip   = opts[:ip]   || OpenFlow::Controller::Controller::DEFAULT_IP_ADDRESS
    port = opts[:port] || OpenFlow::Controller::Controller::DEFAULT_TCP_PORT

    Thread.abort_on_exception = true
    Thread.new do
      begin
        ctl.run ip, port, args
      rescue StandardError => e
        puts "#{e.class}: #{e.message}".red
        exit 1
      end
    end

    loop do
      begin
        input = Readline.readline(PROMPT, true)
        if input == 'exit'
          puts BYE_MSG
          exit
        end
        output = ctl.eval(input).inspect
        puts " => #{output}".green
      rescue StandardError => e
        puts "#{e.class}: #{e.message}".red
      rescue SignalException => e
        puts "\n#{BYE_MSG}"
        exit
      end
    end
  end
end

command.run(ARGV)
